{"version":3,"sources":["../../../../src/basic/Swipe/SwipeoutBtn.js"],"names":["SwipeoutBtn","btn","props","styleSwipeoutBtn","styles","swipeoutBtn","type","push","colorDelete","colorPrimary","colorSecondary","backgroundColor","height","width","styleSwipeoutBtnComponent","styleSwipeoutBtnText","swipeoutBtnText","color","onPress","swipeoutBtnTouchable","underlayColor","disabled","component","text","key","propTypes","style","oneOfType","object","number","array","StyledSwipeoutBtn"],"mappings":"u2BAAA,4B;AACA;;AAEA,4C;AACA;AACA,sE;;AAEMA,W;;;;;;;;;;;;;;;;AAgBK;AACP,GAAIC,KAAM,KAAKC,KAAf;;AAEA,GAAIC,kBAAmB,CAACC,OAAOC,WAAR,CAAvB;;;AAGA,GAAIJ,IAAIK,IAAJ,GAAa,QAAjB,CAA2BH,iBAAiBI,IAAjB,CAAsBH,OAAOI,WAA7B,EAA3B;AACK,GAAIP,IAAIK,IAAJ,GAAa,SAAjB,CAA4BH,iBAAiBI,IAAjB,CAAsBH,OAAOK,YAA7B,EAA5B;AACA,GAAIR,IAAIK,IAAJ,GAAa,WAAjB;AACHH,iBAAiBI,IAAjB,CAAsBH,OAAOM,cAA7B;;;AAGF,GAAIT,IAAIU,eAAR;AACER,iBAAiBI,IAAjB,CAAsB,CAAC,CAAEI,gBAAiBV,IAAIU,eAAvB,CAAD,CAAtB;;AAEFR,iBAAiBI,IAAjB,CAAsB;AACpB;AACEK,OAAQX,IAAIW,MADd;AAEEC,MAAOZ,IAAIY,KAFb,CADoB,CAAtB;;;;AAOA,GAAIC,2BAA4B,EAAhC;;;AAGAA,0BAA0BP,IAA1B,CAA+B;AAC7B;AACEK,OAAQX,IAAIW,MADd;AAEEC,MAAOZ,IAAIY,KAFb,CAD6B,CAA/B;;;;AAOA,GAAIE,sBAAuB,CAACX,OAAOY,eAAR,CAA3B;;;AAGA,GAAIf,IAAIgB,KAAR,CAAeF,qBAAqBR,IAArB,CAA0B,CAAC,CAAEU,MAAOhB,IAAIgB,KAAb,CAAD,CAA1B;;;AAGf,GAAIhB,IAAIgB,KAAR,CAAeF,qBAAqBR,IAArB,CAA0B,CAAC,CAAEU,MAAOhB,IAAIgB,KAAb,CAAD,CAA1B;AACf;AACE;AACE,QAAS,KAAKf,KAAL,CAAWgB,OADtB;AAEE,MAAOd,OAAOe,oBAFhB;AAGE,cAAe,KAAKjB,KAAL,CAAWkB,aAH5B;AAIE,SAAU,KAAKlB,KAAL,CAAWmB,QAJvB;AAKE,MAAOlB,gBALT;AAME,UAAWY,oBANb;;AAQGd,IAAIqB,SAAJ;AACG,iDAAM,MAAOR,yBAAb;AACGb,IAAIqB,SADP,CADH;;AAIGrB,IAAIsB,IAZV,CADF;;;AAgBD,C,0CAtEyB,CACxB,MAAO,CACLZ,gBAAiB,IADZ,CAELM,MAAO,IAFF,CAGLK,UAAW,IAHN,CAILF,cAAe,IAJV,CAKLR,OAAQ,CALH,CAMLY,IAAK,IANA,CAOLN,QAAS,IAPJ,CAQLG,SAAU,KARL,CASLE,KAAM,UATD,CAULjB,KAAM,EAVD,CAWLO,MAAO,CAXF,CAAP,CAaD,C;;;AA2DHb,YAAYyB,SAAZ;AACK,kBAAKA,SADV;AAEEC,MAAO,iBAAUC,SAAV,CAAoB;AACzB,iBAAUC,MADe;AAEzB,iBAAUC,MAFe;AAGzB,iBAAUC,KAHe,CAApB,CAFT;;;;AASA,GAAMC,mBAAoB;AACxB,wBADwB;AAExB,EAFwB;;AAIxB/B,WAJwB,CAA1B,C;;AAM8BA,W,CAArB+B,iB","file":"SwipeoutBtn.js","sourcesContent":["import React, { Component, PropTypes } from \"react\";\nimport { Text, TouchableHighlight, View } from \"react-native\";\n\nimport NativeButton from \"./NativeButton\";\nimport { connectStyle } from \"native-base-shoutem-theme\";\nimport mapPropsToStyleNames from \"../../Utils/mapPropsToStyleNames\";\n\nclass SwipeoutBtn extends Component {\n  static get defaultProps() {\n    return {\n      backgroundColor: null,\n      color: null,\n      component: null,\n      underlayColor: null,\n      height: 0,\n      key: null,\n      onPress: null,\n      disabled: false,\n      text: \"Click me\",\n      type: \"\",\n      width: 0\n    };\n  }\n  render() {\n    var btn = this.props;\n\n    var styleSwipeoutBtn = [styles.swipeoutBtn];\n\n    //  apply \"type\" styles (delete || primary || secondary)\n    if (btn.type === \"delete\") styleSwipeoutBtn.push(styles.colorDelete);\n    else if (btn.type === \"primary\") styleSwipeoutBtn.push(styles.colorPrimary);\n    else if (btn.type === \"secondary\")\n      styleSwipeoutBtn.push(styles.colorSecondary);\n\n    //  apply background color\n    if (btn.backgroundColor)\n      styleSwipeoutBtn.push([{ backgroundColor: btn.backgroundColor }]);\n\n    styleSwipeoutBtn.push([\n      {\n        height: btn.height,\n        width: btn.width\n      }\n    ]);\n\n    var styleSwipeoutBtnComponent = [];\n\n    //  set button dimensions\n    styleSwipeoutBtnComponent.push([\n      {\n        height: btn.height,\n        width: btn.width\n      }\n    ]);\n\n    var styleSwipeoutBtnText = [styles.swipeoutBtnText];\n\n    //  apply text color\n    if (btn.color) styleSwipeoutBtnText.push([{ color: btn.color }]);\n\n    //  apply text color\n    if (btn.color) styleSwipeoutBtnText.push([{ color: btn.color }]);\n    return (\n      <NativeButton\n        onPress={this.props.onPress}\n        style={styles.swipeoutBtnTouchable}\n        underlayColor={this.props.underlayColor}\n        disabled={this.props.disabled}\n        style={styleSwipeoutBtn}\n        textStyle={styleSwipeoutBtnText}\n      >\n        {btn.component\n          ? <View style={styleSwipeoutBtnComponent}>\n              {btn.component}\n            </View>\n          : btn.text}\n      </NativeButton>\n    );\n  }\n}\n\nSwipeoutBtn.propTypes = {\n  ...Text.propTypes,\n  style: PropTypes.oneOfType([\n    PropTypes.object,\n    PropTypes.number,\n    PropTypes.array\n  ])\n};\n\nconst StyledSwipeoutBtn = connectStyle(\n  \"NativeBase.SwipeoutBtn\",\n  {},\n  mapPropsToStyleNames\n)(SwipeoutBtn);\n\nexport { StyledSwipeoutBtn as SwipeoutBtn };\n"]}