{"version":3,"sources":["../../../src/basic/Picker.ios.js"],"names":["PickerNB","props","state","modalVisible","currentLabel","getLabel","dataSource","children","nextProps","nextLabel","currentDS","nextDS","setState","picker","pickerItem","visible","defaultProps","style","getInitialStyle","itemStyle","item","find","child","value","selectedValue","get","cloneElement","iosIcon","fontSize","lineHeight","color","onPress","_setModalVisible","text","placeholder","renderButton","selectedItem","getSelectedItem","textStyle","note","undefined","renderIcon","renderHeader","headerStyle","shadowOffset","shadowColor","shadowRadius","shadowOpacity","headerBackButtonStyle","headerBackButtonTextStyle","headerBackButtonText","headerTitleStyle","iosHeader","_root","c","supportedOrientations","onValueChange","current","label","itemTextStyle","Item","createClass","render","propTypes","func","StyledPickerNB"],"mappings":"61BAAA,4B;AACA;AACA,8B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mD;;AAEA,mE;;AAEMA,Q;AACJ,kBAAYC,KAAZ,CAAmB;AACXA,KADW;AAEjB,MAAKC,KAAL,CAAa;AACXC,aAAc,KADH;AAEXC,aAAc,MAAKC,QAAL,CAAcJ,KAAd,CAFH;AAGXK,WAAYL,MAAMM,QAHP,CAAb,CAFiB;;AAOlB,C;;AAEyBC,S,CAAW;AACnC,GAAMJ,cAAe,KAAKF,KAAL,CAAWE,YAAhC;AACA,GAAMK,WAAY,KAAKJ,QAAL,CAAcG,SAAd,CAAlB;AACA,GAAME,WAAY,KAAKR,KAAL,CAAWI,UAA7B;AACA,GAAMK,QAASH,UAAUD,QAAzB;;AAEA,GAAIH,eAAiBK,SAArB,CAAgC;AAC9B,KAAKG,QAAL,CAAc;AACZR,aAAcK,SADF,CAAd;;AAGD;AACD,GAAIC,YAAcC,MAAlB,CAA0B;AACxB,KAAKC,QAAL,CAAc;AACZN,WAAYK,MADA,CAAd;;AAGD;AACF,C;;AAEiB;AAChB,MAAO;AACLE,OAAQ,EADH;;;AAILC,WAAY,EAJP,CAAP;;AAMD,C;AACgBC,O,CAAS;AACxB,KAAKH,QAAL,CAAc,CAAET,aAAcY,OAAhB,CAAd;AACD,C;;AAEkB;AACjB,GAAMC,cAAe;AACnBC,MAAO,KAAKC,eAAL,GAAuBL,MADX;AAEnBM,UAAW,KAAKD,eAAL,GAAuBJ,UAFf,CAArB;;;AAKA,MAAO,2BAAa,KAAKb,KAAlB,CAAyBe,YAAzB,CAAP;AACD,C;;AAEQf,K,CAAO;AACd,GAAMmB,MAAO,iBAAEC,IAAF;AACXpB,MAAMM,QADK;AAEX,sBAASe,OAAMrB,KAAN,CAAYsB,KAAZ,GAAsBtB,MAAMuB,aAArC,EAFW,CAAb;;AAIA,MAAO,kBAAEC,GAAF,CAAML,IAAN,CAAY,aAAZ,CAAP;AACD,C;;AAEiB;AAChB,MAAO,kBAAEC,IAAF;AACL,KAAKpB,KAAL,CAAWM,QADN;AAEL,sBAASe,OAAMrB,KAAN,CAAYsB,KAAZ,GAAsB,OAAKtB,KAAL,CAAWuB,aAA1C,EAFK,CAAP;;AAID,C;;AAEY;AACX,MAAO,iBAAME,YAAN,CAAmB,KAAKzB,KAAL,CAAW0B,OAA9B,CAAuC;AAC5CV,MAAO,CAAEW,SAAU,EAAZ,CAAgBC,WAAY,EAA5B,CAAgCC,MAAO,SAAvC,CADqC,CAAvC,CAAP;;AAGD,C;;AAEc;AACb,GAAMC,SAAU,QAAVA,QAAU,EAAM;AACpB,OAAKC,gBAAL,CAAsB,IAAtB;AACD,CAFD;AAGA,GAAMC,MAAO,KAAK/B,KAAL,CAAWE,YAAX;AACT,KAAKF,KAAL,CAAWE,YADF;AAET,KAAKH,KAAL,CAAWiC,WAFf;AAGA,GAAI,KAAKjC,KAAL,CAAWkC,YAAf,CAA6B;AAC3B,MAAO,MAAKlC,KAAL,CAAWkC,YAAX,CAAwB;AAC7BJ,eAD6B;AAE7BE,SAF6B;AAG7BpB,OAAQ,IAHqB;AAI7BuB,aAAc,KAAKC,eAAL,EAJe,CAAxB,CAAP;;AAMD;AACD;AACE;AACE,MAAO,KAAKpC,KAAL,CAAWgB,KADpB;AAEE,SAFF;AAGE,WAHF;AAIE,gBAJF;AAKE,QAASc,OALX;;AAOG,KAAK7B,KAAL,CAAWE,YAAX;AACG,0CAAM,MAAO,KAAKH,KAAL,CAAWqC,SAAxB,CAAmC,KAAM,KAAKrC,KAAL,CAAWsC,IAApD;AACG,KAAKrC,KAAL,CAAWE,YADd,CADH;;AAIG;AACE,MAAO,KAAKH,KAAL,CAAWqC,SADpB;AAEE,KAAM,KAAKrC,KAAL,CAAWsC,IAAX,GAAoB,KAApB,CAA4B,KAA5B,CAAoC,IAF5C;;AAIG,KAAKtC,KAAL,CAAWiC,WAJd,CAXN;;AAiBG,KAAKjC,KAAL,CAAW0B,OAAX,GAAuBa,SAAvB,CAAmC,IAAnC,CAA0C,KAAKC,UAAL,EAjB7C,CADF;;;AAqBD,C;;AAEc;AACb,MAAO,MAAKxC,KAAL,CAAWyC,YAAX;AACH,KAAKzC,KAAL,CAAWyC,YAAX,CAAwB,iBAAM,QAAKV,gBAAL,CAAsB,KAAtB,CAAN,EAAxB,CADG;AAEH,8CAAQ,MAAO,KAAK/B,KAAL,CAAW0C,WAA1B;AACE;AACE;AACE;AACEC,aAAc,IADhB;AAEEC,YAAa,IAFf;AAGEC,aAAc,IAHhB;AAIEC,cAAe,IAJjB;AAKK,KAAK9C,KAAL,CAAW+C,qBALhB,CADF;;AAQE,gBARF;AASE,QAAS,kBAAM;AACb,OAAKhB,gBAAL,CAAsB,KAAtB;AACD,CAXH;;AAaE,0CAAM,MAAO,KAAK/B,KAAL,CAAWgD,yBAAxB;AACG,KAAKhD,KAAL,CAAWiD,oBAAX,EAAmC,MADtC,CAbF,CADF,CADF;;;;AAoBE;AACE,4CAAO,MAAO,KAAKjD,KAAL,CAAWkD,gBAAzB;AACG,KAAKlD,KAAL,CAAWmD,SAAX,EAAwB,YAD3B,CADF,CApBF;;;AAyBE,6FAzBF,CAFJ;;AA6BD,C;;AAEQ;AACP;AACE,iDAAM,IAAK,sBAAM,QAAKC,KAAL,CAAaC,CAAnB,EAAX;AACG,KAAKnB,YAAL,EADH;AAEE;AACE,sBAAuB,KAAKlC,KAAL,CAAWsD,qBAAX,EAAoC,IAD7D;AAEE,cAAc,OAFhB;AAGE,YAAa,KAHf;AAIE,QAAS,KAAKrD,KAAL,CAAWC,YAJtB;AAKE,eAAgB,yBAAM;AACpB,OAAK6B,gBAAL,CAAsB,KAAtB;AACD,CAPH;;AASE;AACG,KAAKU,YAAL,EADH;AAEE;AACE;AACE,UAAW,KAAKxC,KAAL,CAAWI,UADxB;AAEE,UAAW;AACT;AACE,SAAUgB,MAAMrB,KAAN,CAAYsB,KAAZ,GAAsB,OAAKtB,KAAL,CAAWuB,aAD7C;AAEE,WAFF;AAGE,MAAO,OAAKvB,KAAL,CAAWkB,SAHpB;AAIE,QAAS,kBAAM;AACb,OAAKa,gBAAL,CAAsB,KAAtB;AACA,OAAK/B,KAAL,CAAWuD,aAAX,CAAyBlC,MAAMrB,KAAN,CAAYsB,KAArC;AACA,OAAKX,QAAL,CAAc,CAAE6C,QAASnC,MAAMrB,KAAN,CAAYyD,KAAvB,CAAd;AACD,CARH;;AAUE,0CAAM,MAAO,OAAKzD,KAAL,CAAW0D,aAAxB;AACGrC,MAAMrB,KAAN,CAAYyD,KADf,CAVF;;AAaE;AACGpC,MAAMrB,KAAN,CAAYsB,KAAZ,GAAsB,OAAKtB,KAAL,CAAWuB,aAAjC;AACG,4CAAO,aAAP,kDADH;AAEG,4CAAO,SAAU,KAAjB,kDAHN,CAbF,CADS,GAFb,kDADF,CAFF,CATF,CAFF,CADF;;;;;;;;;AA2CD,C;;;AAGHxB,SAAS4D,IAAT,CAAgB,gBAAMC,WAAN,CAAkB;AAChCC,MADgC,kBACvB;AACP,MAAO,mDAAQ,IAAR,aAAiB,KAAK7D,KAAL,EAAjB,oDAAP;AACD,CAH+B,CAAlB,CAAhB;;;AAMAD,SAAS+D,SAAT;;AAEE5B,aAAc,iBAAU6B,IAF1B;;;AAKA,GAAMC,gBAAiB;AACrB,qBADqB;AAErB,EAFqB;;AAIrBjE,QAJqB,CAAvB,C;;AAM2BA,Q,CAAlBiE,c","file":"Picker.ios.js","sourcesContent":["import React, { Component, PropTypes } from \"react\";\nimport { Picker, Modal, View, ListView, ViewPropTypes } from \"react-native\";\nimport _ from \"lodash\";\nimport { Text } from \"./Text\";\nimport { List } from \"./List\";\nimport { IconNB as Icon } from \"./IconNB\";\nimport { Radio } from \"./Radio\";\nimport { Container } from \"./Container\";\nimport { Content } from \"./Content\";\nimport { ListItem } from \"./ListItem\";\nimport { Button } from \"./Button\";\nimport { Header } from \"./Header\";\nimport { Title } from \"./Title\";\nimport { Left } from \"./Left\";\nimport { Right } from \"./Right\";\nimport { Body } from \"./Body\";\nimport { connectStyle } from \"native-base-shoutem-theme\";\nimport computeProps from \"../Utils/computeProps\";\n\nimport mapPropsToStyleNames from \"../Utils/mapPropsToStyleNames\";\n\nclass PickerNB extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      modalVisible: false,\n      currentLabel: this.getLabel(props),\n      dataSource: props.children\n    };\n  }\n\n  componentWillReceiveProps(nextProps) {\n    const currentLabel = this.state.currentLabel;\n    const nextLabel = this.getLabel(nextProps);\n    const currentDS = this.state.dataSource;\n    const nextDS = nextProps.children;\n\n    if (currentLabel !== nextLabel) {\n      this.setState({\n        currentLabel: nextLabel\n      });\n    }\n    if (currentDS !== nextDS) {\n      this.setState({\n        dataSource: nextDS\n      });\n    }\n  }\n\n  getInitialStyle() {\n    return {\n      picker: {\n        // alignItems: 'flex-end'\n      },\n      pickerItem: {}\n    };\n  }\n  _setModalVisible(visible) {\n    this.setState({ modalVisible: visible });\n  }\n\n  prepareRootProps() {\n    const defaultProps = {\n      style: this.getInitialStyle().picker,\n      itemStyle: this.getInitialStyle().pickerItem\n    };\n\n    return computeProps(this.props, defaultProps);\n  }\n\n  getLabel(props) {\n    const item = _.find(\n      props.children,\n      child => child.props.value === props.selectedValue\n    );\n    return _.get(item, \"props.label\");\n  }\n\n  getSelectedItem() {\n    return _.find(\n      this.props.children,\n      child => child.props.value === this.props.selectedValue\n    );\n  }\n\n  renderIcon() {\n    return React.cloneElement(this.props.iosIcon, {\n      style: { fontSize: 22, lineHeight: 26, color: \"#7a7a7a\" }\n    });\n  }\n\n  renderButton() {\n    const onPress = () => {\n      this._setModalVisible(true);\n    };\n    const text = this.state.currentLabel\n      ? this.state.currentLabel\n      : this.props.placeholder;\n    if (this.props.renderButton) {\n      return this.props.renderButton({\n        onPress,\n        text,\n        picker: this,\n        selectedItem: this.getSelectedItem()\n      });\n    }\n    return (\n      <Button\n        style={this.props.style}\n        dark\n        picker\n        transparent\n        onPress={onPress}\n      >\n        {this.state.currentLabel\n          ? <Text style={this.props.textStyle} note={this.props.note}>\n              {this.state.currentLabel}\n            </Text>\n          : <Text\n              style={this.props.textStyle}\n              note={this.props.note === false ? false : true}\n            >\n              {this.props.placeholder}\n            </Text>}\n        {this.props.iosIcon === undefined ? null : this.renderIcon()}\n      </Button>\n    );\n  }\n\n  renderHeader() {\n    return this.props.renderHeader\n      ? this.props.renderHeader(() => this._setModalVisible(false))\n      : <Header style={this.props.headerStyle}>\n          <Left>\n            <Button\n              style={{\n                shadowOffset: null,\n                shadowColor: null,\n                shadowRadius: null,\n                shadowOpacity: null,\n                ...this.props.headerBackButtonStyle\n              }}\n              transparent\n              onPress={() => {\n                this._setModalVisible(false);\n              }}\n            >\n              <Text style={this.props.headerBackButtonTextStyle}>\n                {this.props.headerBackButtonText || \"Back\"}\n              </Text>\n            </Button>\n          </Left>\n          <Body>\n            <Title style={this.props.headerTitleStyle}>\n              {this.props.iosHeader || \"Select One\"}\n            </Title>\n          </Body>\n          <Right />\n        </Header>;\n  }\n\n  render() {\n    return (\n      <View ref={c => (this._root = c)}>\n        {this.renderButton()}\n        <Modal\n          supportedOrientations={this.props.supportedOrientations || null}\n          animationType=\"slide\"\n          transparent={false}\n          visible={this.state.modalVisible}\n          onRequestClose={() => {\n            this._setModalVisible(false);\n          }}\n        >\n          <Container>\n            {this.renderHeader()}\n            <Content>\n              <List\n                dataArray={this.state.dataSource}\n                renderRow={child =>\n                  <ListItem\n                    selected={child.props.value === this.props.selectedValue}\n                    button\n                    style={this.props.itemStyle}\n                    onPress={() => {\n                      this._setModalVisible(false);\n                      this.props.onValueChange(child.props.value);\n                      this.setState({ current: child.props.label });\n                    }}\n                  >\n                    <Text style={this.props.itemTextStyle}>\n                      {child.props.label}\n                    </Text>\n                    <Right>\n                      {child.props.value === this.props.selectedValue\n                        ? <Radio selected />\n                        : <Radio selected={false} />}\n                    </Right>\n                  </ListItem>}\n              />\n            </Content>\n          </Container>\n        </Modal>\n      </View>\n    );\n  }\n}\n\nPickerNB.Item = React.createClass({\n  render() {\n    return <Picker.Item {...this.props()} />;\n  }\n});\n\nPickerNB.propTypes = {\n  ...ViewPropTypes,\n  renderButton: PropTypes.func\n};\n\nconst StyledPickerNB = connectStyle(\n  \"NativeBase.PickerNB\",\n  {},\n  mapPropsToStyleNames\n)(PickerNB);\n\nexport { StyledPickerNB as PickerNB };\n"]}