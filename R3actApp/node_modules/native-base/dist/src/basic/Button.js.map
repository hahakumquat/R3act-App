{"version":3,"sources":["../../../src/basic/Button.js"],"names":["Button","borderedBtn","borderWidth","props","bordered","undefined","borderRadius","rounded","borderRadiusLarge","defaultProps","style","getInitialStyle","children","OS","Children","map","child","type","cloneElement","uppercase","androidRipple","prepareRootProps","_root","c","activeOpacity","onPress","androidRippleColor","Ripple","propTypes","oneOfType","object","number","array","block","bool","primary","transparent","success","danger","warning","info","disabled","large","small","active","StyledButton"],"mappings":"u1BAAA,4B;AACA;;;;;;AAMA;AACA,uD;AACA;AACA,mD;;AAEA,mE;;AAEMA,M;AACc;AAChB,MAAO;AACLC,YAAa;AACXC,YAAa,KAAKC,KAAL,CAAWC,QAAX,CAAsB,CAAtB,CAA0BC,SAD5B;AAEXC;AACE,KAAKH,KAAL,CAAWI,OAAX,EAAsB,KAAKJ,KAAL,CAAWC,QAAjC;AACI,mBAAUI,iBADd;AAEI,CALK,CADR,CAAP;;;AASD,C;;;;AAIkB;AACjB,GAAMC,cAAe;AACnBC,MAAO,KAAKC,eAAL,GAAuBV,WADX,CAArB;;;AAIA,MAAO,2BAAa,KAAKE,KAAlB,CAAyBM,YAAzB,CAAP;AACD,C;AACQ;AACP,GAAMG;AACJ,sBAASC,EAAT,GAAgB,KAAhB;AACI,KAAKV,KAAL,CAAWS,QADf;AAEI,gBAAME,QAAN,CAAeC,GAAf;AACE,KAAKZ,KAAL,CAAWS,QADb;AAEE;AACEI,OAASA,MAAMC,IAAN,aAAT;AACI,gBAAMC,YAAN,CAAmBF,KAAnB,WAA4BG,UAAW,IAAvC,EAAgDH,MAAMb,KAAtD,EADJ;AAEIa,KAHN,GAFF,CAHN;;AAUA;AACE,sBAASH,EAAT,GAAgB,KAAhB;AACA,mBAAUO,aAAV,GAA4B,KAD5B;AAEA,sBAAS,SAAT,GAAuB,EAHzB;AAIE;AACA;AACE;AACM,KAAKC,gBAAL,EADN;AAEE,IAAK,sBAAM,QAAKC,KAAL,CAAaC,CAAnB,EAFP;AAGE;AACE,KAAKpB,KAAL,CAAWqB,aAAX,CAA2B,CAA3B,CAA+B,KAAKrB,KAAL,CAAWqB,aAA1C,CAA0D,GAJ9D;;;AAOGZ,QAPH,CADF;;;AAWD,CAhBD,IAgBO;AACL;AACE;AACE,IAAK,sBAAM,QAAKU,KAAL,CAAaC,CAAnB,EADP;AAEE,QAAS,KAAKpB,KAAL,CAAWsB,OAFtB;AAGE;AACE,KAAKtB,KAAL,CAAWuB,kBAAX;AACI,qCAAwBC,MAAxB,CAA+B,KAAKxB,KAAL,CAAWuB,kBAA1C,CADJ;AAEI,qCAAwBC,MAAxB,CAA+B,mBAAUD,kBAAzC,CANR;;AAQM,KAAKL,gBAAL,EARN;;AAUE,4DAAU,KAAKA,gBAAL,EAAV;AACGT,QADH,CAVF,CADF;;;;AAgBD;AACF,C;;;AAGHZ,OAAO4B,SAAP;AACK,8BAAiBA,SADtB;AAEElB,MAAO,iBAAUmB,SAAV,CAAoB;AACzB,iBAAUC,MADe;AAEzB,iBAAUC,MAFe;AAGzB,iBAAUC,KAHe,CAApB,CAFT;;AAOEC,MAAO,iBAAUC,IAPnB;AAQEC,QAAS,iBAAUD,IARrB;AASEE,YAAa,iBAAUF,IATzB;AAUEG,QAAS,iBAAUH,IAVrB;AAWEI,OAAQ,iBAAUJ,IAXpB;AAYEK,QAAS,iBAAUL,IAZrB;AAaEM,KAAM,iBAAUN,IAblB;AAcE9B,SAAU,iBAAU8B,IAdtB;AAeEO,SAAU,iBAAUP,IAftB;AAgBE3B,QAAS,iBAAU2B,IAhBrB;AAiBEQ,MAAO,iBAAUR,IAjBnB;AAkBES,MAAO,iBAAUT,IAlBnB;AAmBEU,OAAQ,iBAAUV,IAnBpB;;;AAsBA,GAAMW,cAAe;AACnB,mBADmB;AAEnB,EAFmB;;AAInB7C,MAJmB,CAArB,C;AAKyBA,M,CAAhB6C,Y","file":"Button.js","sourcesContent":["import React, { Component, PropTypes } from \"react\";\nimport {\n  TouchableOpacity,\n  Platform,\n  View,\n  TouchableNativeFeedback\n} from \"react-native\";\nimport { connectStyle } from \"native-base-shoutem-theme\";\nimport variables from \"./../theme/variables/platform\";\nimport { Text } from \"./Text\";\nimport computeProps from \"../Utils/computeProps\";\n\nimport mapPropsToStyleNames from \"../Utils/mapPropsToStyleNames\";\n\nclass Button extends Component {\n  getInitialStyle() {\n    return {\n      borderedBtn: {\n        borderWidth: this.props.bordered ? 1 : undefined,\n        borderRadius:\n          this.props.rounded && this.props.bordered\n            ? variables.borderRadiusLarge\n            : 2\n      }\n    };\n  }\n\n  _root: React$Element<TouchableOpacity | TouchableNativeFeedback>;\n\n  prepareRootProps() {\n    const defaultProps = {\n      style: this.getInitialStyle().borderedBtn\n    };\n\n    return computeProps(this.props, defaultProps);\n  }\n  render() {\n    const children =\n      Platform.OS === \"ios\"\n        ? this.props.children\n        : React.Children.map(\n            this.props.children,\n            child =>\n              child && child.type === Text\n                ? React.cloneElement(child, { uppercase: true, ...child.props })\n                : child\n          );\n    if (\n      Platform.OS === \"ios\" ||\n      variables.androidRipple === false ||\n      Platform[\"Version\"] <= 21\n    ) {\n      return (\n        <TouchableOpacity\n          {...this.prepareRootProps()}\n          ref={c => (this._root = c)}\n          activeOpacity={\n            this.props.activeOpacity > 0 ? this.props.activeOpacity : 0.5\n          }\n        >\n          {children}\n        </TouchableOpacity>\n      );\n    } else {\n      return (\n        <TouchableNativeFeedback\n          ref={c => (this._root = c)}\n          onPress={this.props.onPress}\n          background={\n            this.props.androidRippleColor\n              ? TouchableNativeFeedback.Ripple(this.props.androidRippleColor)\n              : TouchableNativeFeedback.Ripple(variables.androidRippleColor)\n          }\n          {...this.prepareRootProps()}\n        >\n          <View {...this.prepareRootProps()}>\n            {children}\n          </View>\n        </TouchableNativeFeedback>\n      );\n    }\n  }\n}\n\nButton.propTypes = {\n  ...TouchableOpacity.propTypes,\n  style: PropTypes.oneOfType([\n    PropTypes.object,\n    PropTypes.number,\n    PropTypes.array\n  ]),\n  block: PropTypes.bool,\n  primary: PropTypes.bool,\n  transparent: PropTypes.bool,\n  success: PropTypes.bool,\n  danger: PropTypes.bool,\n  warning: PropTypes.bool,\n  info: PropTypes.bool,\n  bordered: PropTypes.bool,\n  disabled: PropTypes.bool,\n  rounded: PropTypes.bool,\n  large: PropTypes.bool,\n  small: PropTypes.bool,\n  active: PropTypes.bool\n};\n\nconst StyledButton = connectStyle(\n  \"NativeBase.Button\",\n  {},\n  mapPropsToStyleNames\n)(Button);\nexport { StyledButton as Button };\n"]}